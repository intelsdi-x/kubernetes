/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
	Package lifecycle is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		RegisterRequest
		RegisterReply
		UnregisterRequest
		UnregisterReply
		Event
		EventReply
		CgroupInfo
		IsolationControl
*/
package lifecycle

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Event_Kind int32

const (
	Event_POD_PRE_START       Event_Kind = 0
	Event_POD_POST_STOP       Event_Kind = 1
	Event_CONTAINER_PRE_START Event_Kind = 2
	Event_CONTAINER_POST_STOP Event_Kind = 3
)

var Event_Kind_name = map[int32]string{
	0: "POD_PRE_START",
	1: "POD_POST_STOP",
	2: "CONTAINER_PRE_START",
	3: "CONTAINER_POST_STOP",
}
var Event_Kind_value = map[string]int32{
	"POD_PRE_START":       0,
	"POD_POST_STOP":       1,
	"CONTAINER_PRE_START": 2,
	"CONTAINER_POST_STOP": 3,
}

func (x Event_Kind) String() string {
	return proto.EnumName(Event_Kind_name, int32(x))
}
func (Event_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{4, 0} }

type CgroupInfo_Kind int32

const (
	CgroupInfo_QOS       CgroupInfo_Kind = 0
	CgroupInfo_POD       CgroupInfo_Kind = 1
	CgroupInfo_CONTAINER CgroupInfo_Kind = 2
)

var CgroupInfo_Kind_name = map[int32]string{
	0: "QOS",
	1: "POD",
	2: "CONTAINER",
}
var CgroupInfo_Kind_value = map[string]int32{
	"QOS":       0,
	"POD":       1,
	"CONTAINER": 2,
}

func (x CgroupInfo_Kind) String() string {
	return proto.EnumName(CgroupInfo_Kind_name, int32(x))
}
func (CgroupInfo_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{6, 0} }

type IsolationControl_Kind int32

const (
	IsolationControl_CGROUP_CPUSET_CPUS IsolationControl_Kind = 0
	IsolationControl_CGROUP_CPUSET_MEMS IsolationControl_Kind = 1
)

var IsolationControl_Kind_name = map[int32]string{
	0: "CGROUP_CPUSET_CPUS",
	1: "CGROUP_CPUSET_MEMS",
}
var IsolationControl_Kind_value = map[string]int32{
	"CGROUP_CPUSET_CPUS": 0,
	"CGROUP_CPUSET_MEMS": 1,
}

func (x IsolationControl_Kind) String() string {
	return proto.EnumName(IsolationControl_Kind_name, int32(x))
}
func (IsolationControl_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{7, 0} }

type RegisterRequest struct {
	// For example: localhost:10321
	SocketAddress string `protobuf:"bytes,1,opt,name=socketAddress,proto3" json:"socketAddress,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *RegisterRequest) GetSocketAddress() string {
	if m != nil {
		return m.SocketAddress
	}
	return ""
}

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RegisterReply struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *RegisterReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UnregisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UnregisterRequest) Reset()                    { *m = UnregisterRequest{} }
func (*UnregisterRequest) ProtoMessage()               {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *UnregisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UnregisterReply struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *UnregisterReply) Reset()                    { *m = UnregisterReply{} }
func (*UnregisterReply) ProtoMessage()               {}
func (*UnregisterReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *UnregisterReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Event struct {
	Kind          Event_Kind  `protobuf:"varint,1,opt,name=kind,proto3,enum=lifecycle.Event_Kind" json:"kind,omitempty"`
	PodName       string      `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	ContainerName string      `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	Pod           []byte      `protobuf:"bytes,4,opt,name=Pod,json=pod,proto3" json:"Pod,omitempty"`
	CgroupInfo    *CgroupInfo `protobuf:"bytes,5,opt,name=cgroup_info,json=cgroupInfo" json:"cgroup_info,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *Event) GetKind() Event_Kind {
	if m != nil {
		return m.Kind
	}
	return Event_POD_PRE_START
}

func (m *Event) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *Event) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *Event) GetPod() []byte {
	if m != nil {
		return m.Pod
	}
	return nil
}

func (m *Event) GetCgroupInfo() *CgroupInfo {
	if m != nil {
		return m.CgroupInfo
	}
	return nil
}

type EventReply struct {
	Error             string              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	IsolationControls []*IsolationControl `protobuf:"bytes,2,rep,name=isolation_controls,json=isolationControls" json:"isolation_controls,omitempty"`
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *EventReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EventReply) GetIsolationControls() []*IsolationControl {
	if m != nil {
		return m.IsolationControls
	}
	return nil
}

type CgroupInfo struct {
	Kind CgroupInfo_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=lifecycle.CgroupInfo_Kind" json:"kind,omitempty"`
	Path string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *CgroupInfo) Reset()                    { *m = CgroupInfo{} }
func (*CgroupInfo) ProtoMessage()               {}
func (*CgroupInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *CgroupInfo) GetKind() CgroupInfo_Kind {
	if m != nil {
		return m.Kind
	}
	return CgroupInfo_QOS
}

func (m *CgroupInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type IsolationControl struct {
	Kind  IsolationControl_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=lifecycle.IsolationControl_Kind" json:"kind,omitempty"`
	Value string                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *IsolationControl) Reset()                    { *m = IsolationControl{} }
func (*IsolationControl) ProtoMessage()               {}
func (*IsolationControl) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *IsolationControl) GetKind() IsolationControl_Kind {
	if m != nil {
		return m.Kind
	}
	return IsolationControl_CGROUP_CPUSET_CPUS
}

func (m *IsolationControl) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "lifecycle.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "lifecycle.RegisterReply")
	proto.RegisterType((*UnregisterRequest)(nil), "lifecycle.UnregisterRequest")
	proto.RegisterType((*UnregisterReply)(nil), "lifecycle.UnregisterReply")
	proto.RegisterType((*Event)(nil), "lifecycle.Event")
	proto.RegisterType((*EventReply)(nil), "lifecycle.EventReply")
	proto.RegisterType((*CgroupInfo)(nil), "lifecycle.CgroupInfo")
	proto.RegisterType((*IsolationControl)(nil), "lifecycle.IsolationControl")
	proto.RegisterEnum("lifecycle.Event_Kind", Event_Kind_name, Event_Kind_value)
	proto.RegisterEnum("lifecycle.CgroupInfo_Kind", CgroupInfo_Kind_name, CgroupInfo_Kind_value)
	proto.RegisterEnum("lifecycle.IsolationControl_Kind", IsolationControl_Kind_name, IsolationControl_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventDispatcher service

type EventDispatcherClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error)
}

type eventDispatcherClient struct {
	cc *grpc.ClientConn
}

func NewEventDispatcherClient(cc *grpc.ClientConn) EventDispatcherClient {
	return &eventDispatcherClient{cc}
}

func (c *eventDispatcherClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/lifecycle.EventDispatcher/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventDispatcherClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error) {
	out := new(UnregisterReply)
	err := grpc.Invoke(ctx, "/lifecycle.EventDispatcher/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventDispatcher service

type EventDispatcherServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterReply, error)
}

func RegisterEventDispatcherServer(s *grpc.Server, srv EventDispatcherServer) {
	s.RegisterService(&_EventDispatcher_serviceDesc, srv)
}

func _EventDispatcher_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventDispatcherServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lifecycle.EventDispatcher/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventDispatcherServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventDispatcher_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventDispatcherServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lifecycle.EventDispatcher/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventDispatcherServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventDispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lifecycle.EventDispatcher",
	HandlerType: (*EventDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _EventDispatcher_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _EventDispatcher_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Isolator service

type IsolatorClient interface {
	Notify(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error)
}

type isolatorClient struct {
	cc *grpc.ClientConn
}

func NewIsolatorClient(cc *grpc.ClientConn) IsolatorClient {
	return &isolatorClient{cc}
}

func (c *isolatorClient) Notify(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := grpc.Invoke(ctx, "/lifecycle.Isolator/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Isolator service

type IsolatorServer interface {
	Notify(context.Context, *Event) (*EventReply, error)
}

func RegisterIsolatorServer(s *grpc.Server, srv IsolatorServer) {
	s.RegisterService(&_Isolator_serviceDesc, srv)
}

func _Isolator_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolatorServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lifecycle.Isolator/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolatorServer).Notify(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Isolator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lifecycle.Isolator",
	HandlerType: (*IsolatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Isolator_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SocketAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SocketAddress)))
		i += copy(dAtA[i:], m.SocketAddress)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *RegisterReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *UnregisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *UnregisterReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Kind))
	}
	if len(m.PodName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PodName)))
		i += copy(dAtA[i:], m.PodName)
	}
	if len(m.ContainerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContainerName)))
		i += copy(dAtA[i:], m.ContainerName)
	}
	if len(m.Pod) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pod)))
		i += copy(dAtA[i:], m.Pod)
	}
	if m.CgroupInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CgroupInfo.Size()))
		n1, err := m.CgroupInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *EventReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.IsolationControls) > 0 {
		for _, msg := range m.IsolationControls {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CgroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CgroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Kind))
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func (m *IsolationControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsolationControl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Kind))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SocketAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RegisterReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UnregisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UnregisterReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovApi(uint64(m.Kind))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pod)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CgroupInfo != nil {
		l = m.CgroupInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *EventReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.IsolationControls) > 0 {
		for _, e := range m.IsolationControls {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CgroupInfo) Size() (n int) {
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovApi(uint64(m.Kind))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *IsolationControl) Size() (n int) {
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovApi(uint64(m.Kind))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`SocketAddress:` + fmt.Sprintf("%v", this.SocketAddress) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterReply{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnregisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnregisterRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnregisterReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnregisterReply{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`ContainerName:` + fmt.Sprintf("%v", this.ContainerName) + `,`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`CgroupInfo:` + strings.Replace(fmt.Sprintf("%v", this.CgroupInfo), "CgroupInfo", "CgroupInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventReply{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`IsolationControls:` + strings.Replace(fmt.Sprintf("%v", this.IsolationControls), "IsolationControl", "IsolationControl", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CgroupInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CgroupInfo{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsolationControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsolationControl{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Event_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pod = append(m.Pod[:0], dAtA[iNdEx:postIndex]...)
			if m.Pod == nil {
				m.Pod = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CgroupInfo == nil {
				m.CgroupInfo = &CgroupInfo{}
			}
			if err := m.CgroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolationControls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsolationControls = append(m.IsolationControls, &IsolationControl{})
			if err := m.IsolationControls[len(m.IsolationControls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CgroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CgroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CgroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (CgroupInfo_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsolationControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsolationControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsolationControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (IsolationControl_Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0xcd, 0xe6, 0x03, 0xc8, 0xd0, 0x80, 0x99, 0xd2, 0x36, 0x4d, 0x91, 0x15, 0x59, 0x45, 0xa4,
	0x87, 0x06, 0x29, 0x54, 0x5c, 0x2b, 0x08, 0x51, 0x4b, 0x11, 0xb1, 0xeb, 0x84, 0x6b, 0x2d, 0x63,
	0x6f, 0xc2, 0x0a, 0xe3, 0x75, 0xd7, 0x0e, 0x52, 0x6e, 0xfd, 0x09, 0x3d, 0xf5, 0xd8, 0xfe, 0x1d,
	0x8e, 0x3d, 0xf6, 0x58, 0xd2, 0x3f, 0x52, 0x65, 0x9d, 0x04, 0xc7, 0x01, 0x4e, 0x99, 0x8f, 0xb7,
	0x2f, 0xf3, 0xde, 0xee, 0x18, 0x8a, 0x76, 0xc0, 0xea, 0x81, 0xe0, 0x11, 0xc7, 0xa2, 0xc7, 0x7a,
	0xd4, 0x19, 0x3a, 0x1e, 0xad, 0xbc, 0xed, 0xb3, 0xe8, 0x62, 0x70, 0x5e, 0x77, 0xf8, 0xd5, 0x6e,
	0x9f, 0xf7, 0xf9, 0xae, 0x44, 0x9c, 0x0f, 0x7a, 0x32, 0x93, 0x89, 0x8c, 0xe2, 0x93, 0xda, 0x09,
	0xac, 0x9b, 0xb4, 0xcf, 0xc2, 0x88, 0x0a, 0x93, 0x7e, 0x1d, 0xd0, 0x30, 0xc2, 0xd7, 0x50, 0x0a,
	0xb9, 0x73, 0x49, 0xa3, 0x03, 0xd7, 0x15, 0x34, 0x0c, 0xcb, 0xa4, 0x4a, 0x6a, 0x45, 0x73, 0xbe,
	0x88, 0x08, 0x79, 0xdf, 0xbe, 0xa2, 0xe5, 0xac, 0x6c, 0xca, 0x58, 0xdb, 0x86, 0xd2, 0x1d, 0x59,
	0xe0, 0x0d, 0x71, 0x13, 0x0a, 0x54, 0x08, 0x2e, 0x26, 0x14, 0x71, 0xa2, 0xed, 0xc0, 0xc6, 0x99,
	0x2f, 0x52, 0xff, 0x3a, 0xe5, 0x23, 0x09, 0xbe, 0x1d, 0x58, 0x4f, 0x02, 0x1f, 0x66, 0xfc, 0x99,
	0x85, 0x42, 0xeb, 0x9a, 0xfa, 0x11, 0xbe, 0x81, 0xfc, 0x25, 0xf3, 0x5d, 0xd9, 0x5e, 0x6b, 0x3c,
	0xab, 0xcf, 0x8c, 0xa9, 0xcb, 0x7e, 0xfd, 0x84, 0xf9, 0xae, 0x29, 0x21, 0xf8, 0x12, 0x56, 0x02,
	0xee, 0x5a, 0x09, 0x15, 0xcb, 0x01, 0x77, 0xdb, 0xf6, 0x15, 0xc5, 0x6d, 0x58, 0x73, 0xb8, 0x1f,
	0xd9, 0xcc, 0xa7, 0x22, 0x06, 0xe4, 0x62, 0x0f, 0x66, 0x55, 0x09, 0x53, 0x20, 0x67, 0x70, 0xb7,
	0x9c, 0xaf, 0x92, 0xda, 0x13, 0x33, 0x17, 0x70, 0x17, 0xf7, 0x61, 0xd5, 0xe9, 0x0b, 0x3e, 0x08,
	0x2c, 0xe6, 0xf7, 0x78, 0xb9, 0x50, 0x25, 0xb5, 0xd5, 0xb9, 0x29, 0x9a, 0xb2, 0x7b, 0xec, 0xf7,
	0xb8, 0x09, 0xce, 0x2c, 0xd6, 0xbe, 0x40, 0x7e, 0x3c, 0x19, 0x6e, 0x40, 0xc9, 0xd0, 0x8f, 0x2c,
	0xc3, 0x6c, 0x59, 0x9d, 0xee, 0x81, 0xd9, 0x55, 0x32, 0xb3, 0x92, 0xde, 0xe9, 0x5a, 0x9d, 0xae,
	0x6e, 0x28, 0x04, 0x5f, 0xc0, 0xd3, 0xa6, 0xde, 0xee, 0x1e, 0x1c, 0xb7, 0x5b, 0x66, 0x02, 0x9b,
	0x4d, 0x35, 0x66, 0x27, 0x72, 0x9a, 0x0f, 0x20, 0xf5, 0x3f, 0x62, 0x22, 0x7e, 0x02, 0x64, 0x21,
	0xf7, 0xec, 0x88, 0x71, 0xdf, 0x1a, 0x0b, 0x15, 0xdc, 0x0b, 0xcb, 0xd9, 0x6a, 0xae, 0xb6, 0xda,
	0x78, 0x95, 0x90, 0x70, 0x3c, 0x05, 0x35, 0x63, 0x8c, 0xb9, 0xc1, 0x52, 0x95, 0x50, 0x1b, 0x02,
	0xdc, 0x29, 0xc5, 0xfa, 0xdc, 0xa5, 0x54, 0xee, 0xb5, 0x23, 0x79, 0x33, 0x08, 0xf9, 0xc0, 0x8e,
	0x2e, 0xa6, 0x6f, 0x6b, 0x1c, 0x6b, 0x3b, 0x13, 0x87, 0x96, 0x21, 0xf7, 0x59, 0xef, 0x28, 0x99,
	0x71, 0x60, 0xe8, 0x47, 0x0a, 0xc1, 0x12, 0x14, 0x67, 0xa2, 0x95, 0xac, 0xf6, 0x83, 0x80, 0x92,
	0x1e, 0x11, 0xdf, 0xcd, 0x4d, 0x50, 0x7d, 0x44, 0x4d, 0x72, 0x8e, 0x4d, 0x28, 0x5c, 0xdb, 0xde,
	0x60, 0xfa, 0x3c, 0xe2, 0x44, 0xdb, 0x9f, 0x4c, 0xf2, 0x1c, 0xb0, 0xf9, 0xc1, 0xd4, 0xcf, 0x0c,
	0xab, 0x69, 0x9c, 0x75, 0x5a, 0x5d, 0xf9, 0xa3, 0x64, 0x16, 0xeb, 0xa7, 0xad, 0xd3, 0x8e, 0x42,
	0x1a, 0xbf, 0x08, 0xac, 0xcb, 0x4b, 0x38, 0x62, 0x61, 0x60, 0x47, 0xce, 0x05, 0x15, 0x78, 0x08,
	0x2b, 0xd3, 0x8d, 0xc1, 0xa4, 0x2f, 0xa9, 0x9d, 0xac, 0x94, 0xef, 0xed, 0x05, 0xde, 0x50, 0xcb,
	0xe0, 0x47, 0x80, 0xbb, 0x2d, 0xc1, 0xad, 0x04, 0x72, 0x61, 0xcb, 0x2a, 0x95, 0x07, 0xba, 0x92,
	0xa9, 0xf1, 0x1e, 0x56, 0x62, 0x3b, 0xb8, 0xc0, 0x3d, 0x58, 0x6a, 0xf3, 0x88, 0xf5, 0x86, 0xa8,
	0xa4, 0x97, 0xa8, 0xb2, 0xb0, 0x56, 0x13, 0x82, 0xc3, 0xad, 0x9b, 0x5b, 0x95, 0xfc, 0xb9, 0x55,
	0x33, 0xdf, 0x46, 0x2a, 0xb9, 0x19, 0xa9, 0xe4, 0xf7, 0x48, 0x25, 0x7f, 0x47, 0x2a, 0xf9, 0xfe,
	0x4f, 0xcd, 0x9c, 0x2f, 0xc9, 0x4f, 0xce, 0xde, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x8f,
	0x26, 0x18, 0xb9, 0x04, 0x00, 0x00,
}
